library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=FALSE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
data <- read.csv('~/GWU - Blackboard/DSIntro_W_20/Project__I/athlete_events.csv',stringsAsFactors=FALSE) # affects NA conversion to zero
population <- read.csv('~/GWU - Blackboard/DSIntro_W_20/Project__I/pop.csv')
gdp <- read.csv('~/GWU - Blackboard/DSIntro_W_20/Project__I/gdp.csv')
library(dplyr)
library(ggplot2)
library(tidyverse)
# install.packages("rmdformats")
olympics_df <- data.frame(data)
pop_df <- data.frame(population)
gdp_df <- data.frame(gdp)
colnames(pop_df)
unique(colnames(olympics_df))
unique(olympics_df$Year)
olympics_mil <- olympics_df %>% filter(Year >= 2000)
unique(olympics_mil$Year)
pop_df_mil <- pop_df %>% select("Country.Code", "X2000", "X2002", "X2004",
"X2006", "X2008","X2010","X2012", "X2014", "X2016")
gdp_df_mil <- gdp_df %>% select("Country.Code", "X2000", "X2002", "X2004",
"X2006", "X2008","X2010","X2012", "X2014", "X2016")
colnames(pop_df_mil) = c("NOC", "2000", "2002", "2004", "2006", "2008", "2010",
"2012","2014" ,"2016")
colnames(gdp_df_mil) = c("NOC", "2000", "2002", "2004", "2006", "2008", "2010",
"2012","2014" ,"2016")
colnames(pop_df_mil)
colnames(gdp_df_mil)
Year <- c(2000, 2002, 2004, 2006, 2008, 2010, 2012, 2014, 2016)
Year
pop_df_mil_t <- data.frame(t(pop_df_mil))
pop_df_mil_t[] <- lapply(pop_df_mil_t, as.character)
colnames(pop_df_mil_t) <- pop_df_mil_t[1,] # the first row will be the header
pop_df_mil_t <- pop_df_mil_t[-1, ]          # removing the first row.
pop_df_mil_t <- stack(pop_df_mil_t)
colnames(pop_df_mil_t) = c('Population', 'NOC')
pop_df_mil_t['Population'] <- lapply(pop_df_mil_t['Population'] , as.numeric)
length(pop_df_mil_t$Population)
pop_df_mil_t$Year <- rep(Year, times = 264)
gdp_df_mil_t <- data.frame(t(gdp_df_mil))
gdp_df_mil_t[] <- lapply(gdp_df_mil_t, as.character)
colnames(gdp_df_mil_t) = gdp_df_mil_t[1,] # the first row will be the header
gdp_df_mil_t = gdp_df_mil_t[-1, ]          # removing the first row.
gdp_df_mil_t <- stack(gdp_df_mil_t)
colnames(gdp_df_mil_t) = c('GDP', 'NOC')
gdp_df_mil_t['GDP'] <- lapply(gdp_df_mil_t['GDP'] , as.numeric)
length(gdp_df_mil_t$GDP)
gdp_df_mil_t$Year <- rep(Year, times = 264)
pop_gdp_mil_df = merge(gdp_df_mil_t, pop_df_mil_t,
by.x=c("NOC", "Year"),
by.y=c("NOC", "Year"))
sum(is.na(pop_gdp_mil_df$GDP))
sum(is.na(pop_gdp_mil_df$Population))
pop_gdp_mil_df$Population[2]
for(i in seq_along(pop_gdp_mil_df$Population))
{
if(is.na(pop_gdp_mil_df$Population[i]) & pop_gdp_mil_df$Year[i] <= 2004){
pop_gdp_mil_df$Population[i] =
abs((pop_gdp_mil_df$Population[i+1]/pop_gdp_mil_df$Population[i+2])*
pop_gdp_mil_df$Population[i+1])
} else if (is.na(pop_gdp_mil_df$Population[i]) & pop_gdp_mil_df$Year[i] > 2004){
pop_gdp_mil_df$Population[i] =
abs((pop_gdp_mil_df$Population[i-1]/pop_gdp_mil_df$Population[i-2])*
pop_gdp_mil_df$Population[i-1])
} else{0
}
}
for(i in seq_along(pop_gdp_mil_df$GDP))
{
if(is.na(pop_gdp_mil_df$GDP[i]) & pop_gdp_mil_df$Year[i] <= 2004){
pop_gdp_mil_df$GDP[i] =
abs((pop_gdp_mil_df$GDP[i+1]/pop_gdp_mil_df$GDP[i+2])*
pop_gdp_mil_df$GDP[i+1])
} else if (is.na(pop_gdp_mil_df$GDP[i]) & pop_gdp_mil_df$Year[i] > 2004){
pop_gdp_mil_df$GDP[i] =
abs((pop_gdp_mil_df$GDP[i-1]/pop_gdp_mil_df$GDP[i-2])*
pop_gdp_mil_df$GDP[i-1])
} else{0
}
}
pop_gdp_mil_df[which(is.na(pop_gdp_mil_df$Population)),]
pop_gdp_mil_df[which(is.na(pop_gdp_mil_df$GDP)),]
length(unique(pop_gdp_mil_df$NOC))
unique(olympics_mil$Year)
# What is different in varss
# difs <- setdiff(varss,varsg)
# setdiff(unique(olympics_mil$NOC),unique(pop_gdp_mil_df$NOC))
setdiff(unique(pop_gdp_mil_df$NOC),unique(olympics_mil$NOC))
olympics_mil <- olympics_mil %>% filter(!is.na(Height))
olympics_mil <- olympics_mil %>% filter(!is.na(Weight))
sum(is.na(olympics_mil$Medal))
olympics_mil$Medal[is.na(olympics_mil$Medal)] <- 0
# olympics_mil[["Medal"]][is.na(olympics_mil[["Medal"]])] <-0
# olympics_mil$Medal <- replace(olympics_mil$Medal, is.na(olympics_mil$Medal), 0)
oly_gpby_NOC_Yr_Mdl <- olympics_mil %>% group_by(NOC, Year, Medal) %>% tally()
oly_gpby_NOC_Yr_Mdl <- data.frame(oly_gpby_NOC_Yr_Mdl)
# ?merge
# Outer join: merge(x = df1, y = df2, by = "CustomerId", all = TRUE)
# Left outer: merge(x = df1, y = df2, by = "CustomerId", all.x = TRUE)
# Right outer: merge(x = df1, y = df2, by = "CustomerId", all.y = TRUE)
# Cross join: merge(x = df1, y = df2, by = NULL)
pop_gdp_mil_df <- merge(oly_gpby_NOC_Yr_Mdl, pop_gdp_mil_df,
by.x=c("NOC", "Year"),
by.y=c("NOC", "Year"))
pop_gdp_mil_df
sum(is.na(pop_gdp_mil_df$Medal))
sum(is.na(pop_gdp_mil_df$GDP))
sum(is.na(pop_gdp_mil_df$Population))
pop_gdp_mil_df[which(is.na(pop_gdp_mil_df$GDP)),]
pop_gdp_mil_df <- pop_gdp_mil_df %>% filter(!is.na(GDP))
pop_gdp_mil_df$GDPpC <- pop_gdp_mil_df$GDP/pop_gdp_mil_df$Population
sum(pop_gdp_mil_df$n)
ggplot(pop_gdp_mil_df, aes(x=NOC, y=100*(n/sum(n)))) +
geom_bar(stat='identity') +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size=5))
View(pop_gdp_mil_df)
new_data<-data.frame(unique(pop_gdp_mil_df$NOC))
new_data$whether_medal<-1
new_data$number<-0
for(i in 1: nrow(new_data))
{
middle<-subset(pop_gdp_mil_df,pop_gdp_mil_df$NOC==new_data$unique.pop_gdp_mil_df.NOC.[i])
middle<-subset(middle,middle$Medal!=0)
new_data$number[i]<-sum(middle$n)
}
names(new_data)<-c("NOC","whether_medel","number")
new_data_1<-data.frame(unique(pop_gdp_mil_df$NOC))
new_data_1$whether_medal<-0
new_data_1$number<-0
for(i in 1: nrow(new_data_1))
{
middle<-subset(pop_gdp_mil_df,pop_gdp_mil_df$NOC==new_data_1$unique.pop_gdp_mil_df.NOC.[i])
middle<-subset(middle,middle$Medal==0)
new_data_1$number[i]<-sum(middle$n)
}
names(new_data_1)<-c("NOC","whether_medel","number")
new_data<-rbind(new_data,new_data_1)
ggplot(pop_gdp_mil_df, aes(x=NOC, y=n, , fill=Medal)) +
geom_bar(stat='identity') +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size=5))
min(pop_gdp_mil_df$GDPpC)
max(pop_gdp_mil_df$GDPpC)
for(x in Year){
print(x)
attach(pop_gdp_mil_df %>% filter(Year == x))
par(mfrow=c(3,1))
qqnorm(y=GDPpC,
main=paste("Olympics participant countries' GDP per Capita QQ-plot for year ",x))
hist(GDPpC,
main=paste("Olympics participant countries' GDP per Capita Histogram for year ",x), breaks =10000,xlim(100,200000))
boxplot(GDPpC~NOC,
pop_gdp_mil_df, main=paste("Olympics participant countries' GDP per Capita boxplot for year ",x))
}
for(x in Year){
print(x)
attach(pop_gdp_mil_df %>% filter(Year == x))
par(mfrow=c(3,1))
qqnorm(y=GDPpC,
main=paste("Olympics participant countries' GDP per Capita QQ-plot for year ",x))
hist(GDPpC,
main=paste("Olympics participant countries' GDP per Capita Histogram for year ",x), breaks =10000,xlim=c(100,200000))
boxplot(GDPpC~NOC,
pop_gdp_mil_df, main=paste("Olympics participant countries' GDP per Capita boxplot for year ",x))
}
# install.packages('psych')
library(psych)
pairs.panels(corr_olympics)
corr_olympics <- pop_gdp_mil_df %>% filter(!Medal==0)
corr_olympics <- corr_olympics %>% select(NOC, Year, n, GDPpC, Population, GDP)
corr_olympics <- corr_olympics %>% group_by(NOC, Year, n, GDPpC, Population, GDP) %>% tally()
# install.packages('psych')
library(psych)
pairs.panels(corr_olympics)
# install.packages('corrplot')
# library(corrplot)
# corrplot.mixed(cor(corr_olympics), order="hclust", tl.col="black")
View(corr_olympics)
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=FALSE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
#Read data
data <- read.csv('data/athlete_events.csv',stringsAsFactors=FALSE) # affects NA conversion to zero
population <- read.csv('data/pop.csv')
gdp <- read.csv('data/gdp.csv')
library(dplyr)
library(ggplot2)
library(tidyverse)
# install.packages("rmdformats")
# Create Dataframes
olympics_df <- data.frame(data) #Olympics Data
pop_df <- data.frame(population) # Population
gdp_df <- data.frame(gdp) # GDP
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=FALSE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
#Read data
data <- read.csv('data/athlete_events.csv',stringsAsFactors=FALSE) # affects NA conversion to zero
population <- read.csv('data/pop.csv')
gdp <- read.csv('data/gdp.csv')
library(dplyr)
library(ggplot2)
library(tidyverse)
# install.packages("rmdformats")
# Create Dataframes
olympics_df <- data.frame(data) #Olympics Data
pop_df <- data.frame(population) # Population
gdp_df <- data.frame(gdp) # GDP
colnames(pop_df)
unique(colnames(olympics_df))
unique(olympics_df$Year)
# I will take data from 2000- less missing data and the sports included are the same up to 2016
olympics_mil <- olympics_df %>% filter(Year >= 2000)
unique(olympics_mil$Year)
pop_df_mil <- pop_df %>% select("Country.Code", "X2000", "X2002", "X2004",
"X2006", "X2008","X2010","X2012", "X2014", "X2016")
gdp_df_mil <- gdp_df %>% select("Country.Code", "X2000", "X2002", "X2004",
"X2006", "X2008","X2010","X2012", "X2014", "X2016")
# Rename columns
colnames(pop_df_mil) = c("NOC", "2000", "2002", "2004", "2006", "2008", "2010",
"2012","2014" ,"2016")
colnames(gdp_df_mil) = c("NOC", "2000", "2002", "2004", "2006", "2008", "2010",
"2012","2014" ,"2016")
colnames(pop_df_mil)
colnames(gdp_df_mil)
Year <- c(2000, 2002, 2004, 2006, 2008, 2010, 2012, 2014, 2016)
Year
# Reshaping population data by stacking columns and rows differently to be
# consistant with olympics' data
pop_df_mil_t <- data.frame(t(pop_df_mil))
# convert
pop_df_mil_t[] <- lapply(pop_df_mil_t, as.character)
colnames(pop_df_mil_t) <- pop_df_mil_t[1,] # the first row will be the header
pop_df_mil_t <- pop_df_mil_t[-1, ]          # removing the first row.
pop_df_mil_t <- stack(pop_df_mil_t)
colnames(pop_df_mil_t) = c('Population', 'NOC')
pop_df_mil_t['Population'] <- lapply(pop_df_mil_t['Population'] , as.numeric)
length(pop_df_mil_t$Population)
pop_df_mil_t$Year <- rep(Year, times = 264)
# Reshaping GDP data by stacking columns and rows differently to be
# consistant with olympics' data
gdp_df_mil_t <- data.frame(t(gdp_df_mil))
gdp_df_mil_t[] <- lapply(gdp_df_mil_t, as.character)
colnames(gdp_df_mil_t) = gdp_df_mil_t[1,] # the first row will be the header
gdp_df_mil_t = gdp_df_mil_t[-1, ]          # removing the first row.
gdp_df_mil_t <- stack(gdp_df_mil_t)
colnames(gdp_df_mil_t) = c('GDP', 'NOC')
gdp_df_mil_t['GDP'] <- lapply(gdp_df_mil_t['GDP'] , as.numeric)
length(gdp_df_mil_t$GDP)
gdp_df_mil_t$Year <- rep(Year, times = 264)
# Merging popluation and GDP dataframes into one
pop_gdp_mil_df = merge(gdp_df_mil_t, pop_df_mil_t,
by.x=c("NOC", "Year"),
by.y=c("NOC", "Year"))
# checking NAN
sum(is.na(pop_gdp_mil_df$GDP))
sum(is.na(pop_gdp_mil_df$Population))
# Replacing missing population values by in the new merged dataframe by interpolating the available years for each country
for(i in seq_along(pop_gdp_mil_df$Population))
{
# if missing data is between 2000->2004, interpolate using the two ahead
if(is.na(pop_gdp_mil_df$Population[i]) & pop_gdp_mil_df$Year[i] <= 2004){
pop_gdp_mil_df$Population[i] =
abs((pop_gdp_mil_df$Population[i+1]/pop_gdp_mil_df$Population[i+2])*
pop_gdp_mil_df$Population[i+1])
# if missing data is > 2004, interpolate using the two before
} else if (is.na(pop_gdp_mil_df$Population[i]) & pop_gdp_mil_df$Year[i] > 2004){
pop_gdp_mil_df$Population[i] =
abs((pop_gdp_mil_df$Population[i-1]/pop_gdp_mil_df$Population[i-2])*
pop_gdp_mil_df$Population[i-1])
} else{0
}
}
# same as above done for GPD
for(i in seq_along(pop_gdp_mil_df$GDP))
{
if(is.na(pop_gdp_mil_df$GDP[i]) & pop_gdp_mil_df$Year[i] <= 2004){
pop_gdp_mil_df$GDP[i] =
abs((pop_gdp_mil_df$GDP[i+1]/pop_gdp_mil_df$GDP[i+2])*
pop_gdp_mil_df$GDP[i+1])
} else if (is.na(pop_gdp_mil_df$GDP[i]) & pop_gdp_mil_df$Year[i] > 2004){
pop_gdp_mil_df$GDP[i] =
abs((pop_gdp_mil_df$GDP[i-1]/pop_gdp_mil_df$GDP[i-2])*
pop_gdp_mil_df$GDP[i-1])
} else{0
}
}
# Remainder of countries that have NA values do not particpate on the olympics
pop_gdp_mil_df[which(is.na(pop_gdp_mil_df$Population)),]
pop_gdp_mil_df[which(is.na(pop_gdp_mil_df$GDP)),]
length(unique(pop_gdp_mil_df$NOC))
unique(olympics_mil$Year)
setdiff(unique(pop_gdp_mil_df$NOC),unique(olympics_mil$NOC))
olympics_mil <- olympics_mil %>% filter(!is.na(Height))
olympics_mil <- olympics_mil %>% filter(!is.na(Weight))
# replacing NA values for medals with zero
sum(is.na(olympics_mil$Medal))
olympics_mil$Medal[is.na(olympics_mil$Medal)] <- 0
# counting medals won by each country
oly_gpby_NOC_Yr_Mdl <- olympics_mil %>% group_by(NOC, Year, Medal) %>% tally()
oly_gpby_NOC_Yr_Mdl <- data.frame(oly_gpby_NOC_Yr_Mdl)
# counting medals won by each country for every sport
oly_gpby_NOC_Yr_Mdl_sprt <- olympics_mil %>% group_by(Sport, NOC, Year, Medal) %>% count(Medal,)
oly_gpby_NOC_Yr_Mdl_sprt <- data.frame(oly_gpby_NOC_Yr_Mdl_sprt)
oly_gpby_NOC_Yr_Mdl_sprt <- oly_gpby_NOC_Yr_Mdl_sprt %>% filter(Medal!=0)
# Merging oly_gpby_NOC_Yr_Mdl df with population and GDP dataframe
pop_gdp_mil_df_oly <- merge(oly_gpby_NOC_Yr_Mdl, pop_gdp_mil_df,
by.x=c("NOC", "Year"),
by.y=c("NOC", "Year"))
pop_gdp_mil_df_oly[which(is.na(pop_gdp_mil_df_oly$GDP)),]
pop_gdp_mil_df_oly <- pop_gdp_mil_df_oly %>% filter(!is.na(GDP))
pop_gdp_mil_df_oly$GDPpC <- pop_gdp_mil_df_oly$GDP/pop_gdp_mil_df_oly$Population
sum(pop_gdp_mil_df_oly$n)
# Merging oly_gpby_NOC_Yr_Mdl_sprt df with population and GDP dataframe
pop_gdp_mil_df_sprt <- merge(oly_gpby_NOC_Yr_Mdl_sprt, pop_gdp_mil_df,
by.x=c("NOC", "Year"),
by.y = c("NOC", "Year"), all.x = TRUE)
pop_gdp_mil_df_sprt[which(is.na(pop_gdp_mil_df_sprt$GDP)),]
pop_gdp_mil_df_sprt <- pop_gdp_mil_df_sprt %>% filter(!is.na(GDP))
pop_gdp_mil_df_sprt$GDPpC <- pop_gdp_mil_df_sprt$GDP/pop_gdp_mil_df_sprt$Population
sum(pop_gdp_mil_df_sprt$n)
ggplot(pop_gdp_mil_df_oly%>%filter(Medal!=0), aes(x=NOC, y=n, fill=Medal))+
geom_bar(stat='identity') +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size=5))
scatter_1<-data.frame(unique(pop_gdp_mil_df_oly$NOC))
for(i in 1: nrow(scatter_1)) {
dummy_set<-subset(pop_gdp_mil_df_oly, pop_gdp_mil_df_oly$NOC==scatter_1$unique.pop_gdp_mil_df_oly.NOC.[i])
dummy_set<-subset(dummy_set, dummy_set$Medal!=0)
scatter_1$totMedals[i]<-sum(dummy_set$n)
dummy_set<-subset(pop_gdp_mil_df_oly, pop_gdp_mil_df_oly$NOC==scatter_1$unique.pop_gdp_mil_df_oly.NOC.[i])
scatter_1$avePop[i]<-mean(dummy_set$Population)
dummy_set<-subset(pop_gdp_mil_df_oly, pop_gdp_mil_df_oly$NOC==scatter_1$unique.pop_gdp_mil_df_oly.NOC.[i])
scatter_1$aveGDP[i]<-mean(dummy_set$GDP)
dummy_set<-subset(pop_gdp_mil_df_oly, pop_gdp_mil_df_oly$NOC==scatter_1$unique.pop_gdp_mil_df_oly.NOC.[i])
scatter_1$aveGDPpC[i]<-mean(dummy_set$GDPpC)
}
ggplot(scatter_1, aes(x=avePop, y=totMedals)) +
geom_point()
ggplot(scatter_1, aes(x=aveGDP, y=totMedals)) +
geom_point()
ggplot(scatter_1, aes(x=aveGDPpC, y=totMedals)) +
geom_point()
ggplot(scatter_1, aes(x=log(avePop), y=totMedals)) +
geom_point()
ggplot(scatter_1, aes(x=log(aveGDP), y=totMedals)) +
geom_point()
ggplot(scatter_1, aes(x=log(aveGDPpC), y=totMedals)) +
geom_point()
scatter_1_stats= summary(scatter_1)
hist(scatter_1$avePop, breaks =100)
hist(scatter_1$aveGDP, breaks =100 )
hist(scatter_1$aveGDPpC, breaks =100)
hist(log(scatter_1$aveGDPpC), breaks =100)
# install.packages('psych')
library(psych)
pairs.panels(scatter_1)
# install.packages('corrplot')
# library(corrplot)
# corrplot.mixed(cor(corr_olympics), order="hclust", tl.col="black")
scatter_2 <- pop_gdp_mil_df_sprt %>% group_by(Sport, NOC) %>% tally(n)
scatter_2 <- data.frame(scatter_2)
for(i in 1: nrow(scatter_2)) {
dummy_set<-subset(pop_gdp_mil_df_sprt, pop_gdp_mil_df_sprt$NOC==scatter_2$NOC[i])
scatter_2$avePop[i]<-mean(unique(dummy_set$Population))
dummy_set<-subset(pop_gdp_mil_df_sprt, pop_gdp_mil_df_sprt$NOC==scatter_2$NOC[i])
scatter_2$aveGDP[i]<-mean(unique(dummy_set$GDP))
dummy_set<-subset(pop_gdp_mil_df_sprt, pop_gdp_mil_df_sprt$NOC==scatter_2$NOC[i])
scatter_2$aveGDPpC[i]<-mean(unique(dummy_set$GDPpC))
}
Sportz =cbind(unique(scatter_2$Sport))
for(x in Sportz){
print(x)
dummy = scatter_2 %>% filter(Sport == x)
attach(dummy)
#  par(mfrow=c(5,10))
plot(aveGDPpC, n, main=paste(x))
}
Sportz =cbind(unique(scatter_2$Sport))
for(x in Sportz){
print(x)
dummy = scatter_2 %>% filter(Sport == x)
attach(dummy)
#  par(mfrow=c(5,10))
pairs.panels(dummy, main=x)
}
